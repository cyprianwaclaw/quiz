{
    "openapi": "3.0.0",
    "info": {
        "title": "Swagger Power of Quiz",
        "description": "",
        "termsOfService": "",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://quiz.test/api",
            "description": "Deployment environment"
        }
    ],
    "paths": {
        "/pet/findByTags": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "deprecated": true
            }
        },
        "/pet/findByStatus": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma separated strings",
                "operationId": "findPetsByStatus",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that need to be considered for filter",
                        "required": true,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "default": "available",
                                "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/pet/{petId}": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a single pet",
                "operationId": "getPetById",
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Updates a pet in the store with form data",
                "description": "",
                "operationId": "updatePetWithForm",
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet that needs to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Updated name of the pet",
                                        "type": "string"
                                    },
                                    "status": {
                                        "description": "Updated status of the pet",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ssss": {
                                            "type": "string"
                                        },
                                        "sadsd": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Category"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "ok"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "delete": {
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "Pet id to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                }
            }
        },
        "/pet": {
            "put": {
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet.",
                "description": "",
                "operationId": "updatePet",
                "requestBody": {
                    "description": "Pet object that needs to be added to the store",
                    "required": true,
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Category"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Category"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "description": "",
                "operationId": "addPet",
                "requestBody": {
                    "description": "Pet object that needs to be added to the store",
                    "required": true,
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Category"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Category"
                            }
                        }
                    }
                },
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "uploads an image",
                "description": "",
                "operationId": "uploadFile",
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "additionalMetadata": {
                                        "description": "Additional data to pass to server",
                                        "type": "string"
                                    },
                                    "file": {
                                        "description": "file to upload",
                                        "type": "string",
                                        "format": "file"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "tags": [
                    "categories"
                ],
                "description": "Return all categories",
                "operationId": "cdca0f4b661a2e316b064caedb57c5ca",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Category"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "ok"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/categories/{id}": {
            "post": {
                "tags": [
                    "categories"
                ],
                "operationId": "1cbd001688ba493356ba45eb66b5873d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Parameter with mutliple examples",
                        "required": true,
                        "schema": {
                            "type": "int",
                            "minLength": 5
                        },
                        "examples": {
                            "int": {
                                "summary": "An int value.",
                                "value": "1"
                            },
                            "uuid": {
                                "summary": "An UUID value.",
                                "value": "0006faf6-7a61-426c-9034-579f2cfcfa83"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ApiResponse"
                                        },
                                        {
                                            "type": "boolean"
                                        }
                                    ]
                                },
                                "examples": {
                                    "result": {
                                        "summary": "An result object.",
                                        "value": {
                                            "success": true
                                        }
                                    },
                                    "bool": {
                                        "summary": "A boolean value.",
                                        "value": false
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ApiResponse": {
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "data": {
                        "type": "array",
                        "items": {}
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Category": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "example": "Zwierzęta"
                    },
                    "created_at": {
                        "$ref": "#/components/schemas/DateTime"
                    },
                    "updated_at": {
                        "$ref": "#/components/schemas/DateTime"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Category"
                }
            },
            "DateTime": {
                "type": "string",
                "example": "2022-02-03T22:38:18.000000Z"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "##### To authenticate requests, include an **Authorization** header with the value `Bearer {YOUR_AUTH_KEY}`.\n##### All authenticated endpoints are marked with a lock icon in the documentation below.\n##### You can retrieve your token by call request to `/api/login`.",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "categories",
            "description": "",
            "externalDocs": {
                "description": "",
                "url": ""
            }
        },
        {
            "name": "questions",
            "description": ""
        },
        {
            "name": "answers",
            "description": ""
        }
    ],
    "externalDocs": {
        "description": "Contact to Website Developer",
        "url": "https://m.me/stockerss22"
    },
    "security": [
        []
    ]
}